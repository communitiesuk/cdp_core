parameters:
  - name: environment
    type: string

stages:
  - stage: DEV
    displayName: "DEV"
    jobs:
      - job: DEV
        displayName: "Deploy DEV"
        variables:
          - template: variables.yml
            parameters:
              environment: ${{ parameters.environment }}

        steps:
          - script: |
              echo "Installing Requirements"
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              pip install uv pylint yamllint
            displayName: "Install Agent Requirements"

          # - script: |
          #     echo "Running Pylint"
          #     pylint src/ --rcfile=.pylintrc --exit-zero
          #   displayName: "Run PyLint"
      
          # - script: |
          #     echo "Running Yaml Lint"
          #     yamllint -c .yamllint . || true
          #   displayName: "Run YamlLint"

          # - task: AzureCLI@2
          #   condition: succeeded()
          #   displayName: "Validate Databricks Bundle"
          #   inputs:
          #     azureSubscription: $(SPN_DEV_ID) # BUG - https://github.com/microsoft/azure-pipelines-tasks/issues/17218
          #     useGlobalConfig: true
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       set -e
          #       export DATABRICKS_HOST=$(DATABRICKS_HOST)
          #       echo "Validating Databricks Bundle"
          #       databricks bundle validate --var="environment=development"
          
          # - task: AzureCLI@2
          #   condition: succeeded()
          #   displayName: "Deploy Databricks Bundle"
          #   inputs:
          #     azureSubscription: $(SPN_DEV_ID)
          #     useGlobalConfig: true
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       set -e
          #       echo "Deploying Databricks Bundle"
          #       export DATABRICKS_HOST=$(DATABRICKS_HOST)
          #       databricks bundle deploy --var="environment=development"
          
          # - task: AzureCLI@2
          #   condition: succeeded()
          #   displayName: "Unit Tests"
          #   inputs:
          #     azureSubscription: $(SPN_DEV_ID)
          #     useGlobalConfig: true
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       databricks bundle run jb_pytest --var="environment=development"

          - task: AzureCLI@2
            condition: succeeded()
            displayName: "System Integration Tests"
            inputs:
              azureSubscription: $(SPN_DEV_ID)
              useGlobalConfig: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |

                ls resources/*.yml | xargs -n 1 basename | sed 's/\.yml$//' > bundle_names.txt
                declare -a pids
                declare -a statuses

                for bundle_name in $(cat bundle_names.txt); do
                  if [[ "$bundle_name" == *pytest* ]]; then
                    echo "Skipping bundle: $bundle_name (contains 'pytest')"
                    continue
                  fi
                  echo "Running bundle: $bundle_name"
                  databricks bundle run "$bundle_name" --refresh-all --var="environment=development"&
                  pids+=($!)
                done

                # Wait for all jobs and collect exit codes
                for pid in "${pids[@]}"; do
                  wait $pid
                  statuses+=($?)
                done

                # Check if any job failed
                for status in "${statuses[@]}"; do
                  if [[ $status -ne 0 ]]; then
                    echo "One or more bundle runs failed."
                    exit 1
                  fi
                done

