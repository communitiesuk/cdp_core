parameters:
  - name: environment
    type: string

stages:
  - stage: DEV
    displayName: "DEV"
    jobs:
      - job: DEV
        displayName: "Deploy DEV"
        variables:
          - template: variables.yml
            parameters:
              environment: ${{ parameters.environment }}

        steps:
          # 1. Install Agent Requirements, Allowing Executables & Create Security Reports Directory
          - script: |
              # Install the Databricks CLI
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              
              # Install linters and security scanners
              pip install pylint yamllint bandit
              
              # Enable all scripts to be executable within scripts folder
              chmod +x ./templates/scripts/*
              
              # Create directories for security reports
              mkdir security_reports
            displayName: "Install Agent Requirements, Allowing Executables & Create Security Reports Directory"
          
          # 2. Get and Increment Tag
          - script: templates/scripts/bump-version.sh
            name: setTag
            displayName: "Get and Increment Tag"

          # 3. Set Environment Variables
          - script: |
              set -e          
              export WHL_FILE=cdp_core-$(setTag.BUILD_VERSION)-py3-none-any.whl
              export SOURCE_PATH=packages/${WHL_FILE}
              export TARGET_PATH=/Workspace/Shared/artifacts/${WHL_FILE}
              export BUNDLE_VAR="environment=$(ENVIRONMENT),whl_path=/Workspace/Shared/artifacts/${WHL_FILE},SPN_ID=$(SPN_ID)"

              echo "##vso[task.setvariable variable=SOURCE_PATH;isOutput=true]$SOURCE_PATH";
              echo "##vso[task.setvariable variable=TARGET_PATH;isOutput=true]$TARGET_PATH";
              echo "##vso[task.setvariable variable=BUNDLE_VAR;isOutput=true]$BUNDLE_VAR";
            name: setEnvVars
            displayName: "Setting Environment Variables"

        # 4. Run Bandit - Source Code Scanner
          - template: steps/security_scans.yml
            parameters:
              severity: "medium"
              inlineScript: |
                # recursively scan all the Python files in the src/ directory and its subdirectories
                bandit --ini cicd_configs/security/.bandit -r src/ -f json -o security_reports/bandit_report.json
          # - script: |
          #     # recursively scan all the Python files in the src/ directory and its subdirectories
          #     bandit --ini cicd_configs/security/.bandit -r src/ -f json -o security_reports/bandit_report.json --severity-level medium
          #   displayName: "Run Bandit - Source Code Scanner"
          
        # # 5. Run Safety - Dependency Scanner         
        #   - script: |
        #       # Create the cdp-core whl in the packages directory
        #       python setup.py bdist_wheel --dist-dir packages/
              
        #       # Create and activate virtual environment
        #       python -m venv venv
        #       source venv/bin/activate

        #       # Install Safety and cdp_core
        #       pip install safety==2.3.5
        #       pip install packages/*.whl
        #       pip freeze > security_reports/requirements.txt

        #       # Scan the dependencies
        #       safety check --key $(SAFETY_API_KEY) --file security_reports/requirements.txt --json > security_reports/safety_report.json
        #       # safety --key $(SAFETY_API_KEY) scan --output json > security_reports/safety_report.json
        #     displayName: "Run Safety Scan - Dependency Scanner"
        #     env:
        #       SAFETY_API_KEY: $(SAFETY_API_KEY)
        #       SAFETY_CLI_DISABLE_LOCAL_CONFIG: "1"

        # 5. Publish All Security Reports
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'security_reports'
              artifactName: 'security-reports'
              publishLocation: 'Container'
            displayName: "Publish Reports"


          # # 4. Run PyLint
          # - script: |
          #     pylint src/ --rcfile=.pylintrc --exit-zero
          #   displayName: "Run PyLint"
          
          # # 5. Run YamlLint
          # - script: |
          #     yamllint -c .yamllint . || true
          #   displayName: "Run YamlLint"

          # # 6. Validate Databricks Bundle
          # - template: steps/dev_azure_cli.yml
          #   parameters:
          #     description: "Validating Databricks Bundle"
          #     inlineScript: |
          #       databricks bundle validate --var=$(setEnvVars.BUNDLE_VAR)

          # # 7. Deploy Databricks Bundle
          # - template: steps/dev_azure_cli.yml
          #   parameters:
          #     description: "Deploy Databricks Bundle"
          #     inlineScript: |
          #       export BUILD_VERSION=$(setTag.BUILD_VERSION)
          #       databricks bundle deploy --var=$(setEnvVars.BUNDLE_VAR)
          
          # # 8. Run Unit Tests
          # - template: steps/dev_azure_cli.yml
          #   parameters:
          #     description: "Unit Tests"
          #     inlineScript: |
          #       databricks bundle run jb_pytest --var=$(setEnvVars.BUNDLE_VAR)
          
          # # 9. Copy whl file to Shared Area 
          # - template: steps/dev_azure_cli.yml
          #   parameters:
          #     description: "Copying whl file to Shared Area"
          #     inlineScript: |
          #       databricks workspace mkdirs /Shared/artifacts
          #       databricks workspace import --overwrite --format "AUTO" --file $(setEnvVars.SOURCE_PATH) $(setEnvVars.TARGET_PATH)
                