parameters:
  - name: environment
    type: string

stages:
  - stage: DEV
    displayName: "DEV"
    jobs:
      - job: DEV
        displayName: "Deploy DEV"
        variables:
          - template: variables.yml
            parameters:
              environment: ${{ parameters.environment }}

        steps:
          # 1. Install All Requirements
          - script: |
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              pip install uv pylint yamllint
            displayName: "Install Agent Requirements"

          # 2. Set Environment Variables
          - script: |
              set -e
              export DATABRICKS_HOST=$(DATABRICKS_HOST)
              export ENVIRONMENT=$(ENVIRONMENT)
            displayName: "Setting Environment Variables"

          # 3. Run PyLint
          # - script: |
          #     pylint src/ --rcfile=.pylintrc --exit-zero
          #   displayName: "Run PyLint"
          
          # 4. Run YamlLint
          # - script: |
          #     yamllint -c .yamllint . || true
          #   displayName: "Run YamlLint"

          # 5. Validate Databricks Bundle
          # - template: steps/dev_azure_cli.yml
          #   parameters:
          #     description: "Validating Databricks Bundle"
          #     inlineScript: |
          #       databricks bundle validate --var="environment=$(ENVIRONMENT)"

          # TODO - Generate version number (major / minor) 
          # Retrieve latest tag
          - script: |
              #!/bin/bash
 
        # Get current branch name
        branch_name=$(git rev-parse --abbrev-ref HEAD)
        
        # Get latest numeric tag (e.g., v1.2.3 or 1.2.3)
        latest_tag=$(git tag | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/^v//' | sort -V | tail -n 1)
        
        # Split version into components
        IFS='.' read -r major minor patch <<< "$latest_tag"
        
        # Determine bump type from branch name
        if [[ "$branch_name" == *"PATCH"* ]]; then
            patch=$((patch + 1))
        elif [[ "$branch_name" == *"MINOR"* ]]; then
            minor=$((minor + 1))
            patch=0
        elif [[ "$branch_name" == *"MAJOR"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
        else
            # Default to MAJOR if no keyword found
            major=$((major + 1))
            minor=0
            patch=0
        fi
        
        # Construct new version
        new_version="$major.$minor.$patch"
        new_tag="v$new_version"
        
        # Output the new tag
        echo "New tag: $new_tag"
        
        # Optional: create and push the tag
        # git tag "$new_tag"
        # git push origin "$new_tag"
              echo "##vso[task.setvariable variable=BUILD_VERSION]$new_version"
            displayName: "Generate Version Number"

          # 6. Deploy Databricks Bundle
          - template: steps/dev_azure_cli.yml
            parameters:
              description: "Deploy Databricks Bundle"
              inlineScript: |
                databricks bundle deploy --var="environment=$(ENVIRONMENT)"     
          
          # 7. Run Unit Tests
          # - template: steps/dev_azure_cli.yml
          #   parameters:
          #     description: "Unit Tests"
          #     inlineScript: |
          #       databricks bundle run jb_pytest --var="environment=$(ENVIRONMENT)"
          
          # 8. Copy whl file to gold volume
          - template: steps/dev_azure_cli.yml
            parameters:
              description: "Copying whl file to Gold volume"
              inlineScript: |
                databricks fs mkdir dbfs:/Volumes/catalog-sbx-uks-corecdp-001/schema-sbx-uks-corecdp-analyse-001/volume-sbx-uks-corecdp-analyse-001/artifacts
                databricks fs cp packages/cdp_core-0.0.1-py3-none-any.whl dbfs:/Volumes/catalog-sbx-uks-corecdp-001/schema-sbx-uks-corecdp-analyse-001/volume-sbx-uks-corecdp-analyse-001/artifacts/cdp_core-0.0.1-py3-none-any.whl --overwrite
                