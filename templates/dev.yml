parameters:
  - name: environment
    type: string

stages:
  - stage: DEV
    displayName: "DEV"
    jobs:

      - job: SecurityChecks
        displayName: "Source Code and Dependencies Security Checks"
        steps:
          # 1. Install Agent Requirements & Allowing Executables
          - script: |   
              # Exit immediately if any command fails
              set -e

              # Install the Databricks CLI
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              pip install pylint yamllint bandit pip-audit safety
              
              # Enable all scripts to be executable within scripts folder
              chmod +x ./templates/scripts/*
            displayName: "Install Agent Requirements & Allowing Executables"

        # 4. Pre Security Check Tasks
          - script: |
              # Exit immediately if any command fails
              set -e
              
              # Create a common directory for security reports
              mkdir security_reports

              # Initiate new python environment
              python -m venv venv
              source venv/bin/activate
              pip install pipreqs
              
              # Retrieve top level imports
              pipreqs ./src --force --savepath security_reports/requirements.txt

              # Install direct requirements and sub-dependencies
              pip install -r security_reports/requirements.txt

              # Retrieve full dependencies
              pip freeze > security_reports/full_requirements.txt
            displayName: "Pre-Security Check Tasks"

        # 5. Run Bandit - Source Code Scanner
          - template: steps/security_scans.yml
            parameters:
              scanType: "bandit"
              severity: "high"
              inlineScript: |
                bandit --ini cicd_configs/security/.bandit -r src/ -f json -o security_reports/bandit_report.json
        
        # 6. Run Pip Audit - Dependency Scanner (1)
          - template: steps/security_scans.yml
            parameters:
              scanType: "pip-audit"
              inlineScript: |
                pip-audit -r security_reports/full_requirements.txt -f json -o security_reports/pip_audit_report.json
        
        # 7. Run Safety Check - Dependency Scanner (2)
          - template: steps/security_scans.yml
            parameters:
              scanType: "safety"
              inlineScript: | 
                safety --key $(SAFETY_API_KEY) check -r security_reports/full_requirements.txt --save-json security_reports/safety_report.json
      

      - job: "Linting" 
        displayName: "Python and Yaml Lint"
        steps: 
          # 1. Install Agent Requirements
          - script: |   
              # Exit immediately if any command fails
              set -e
          
              # Install lint requirements 
              pip install pylint yamllint 
            displayName: "Install Agent Requirements"

          # 2. Run PyLint
          - script: |
              pylint src/ --rcfile=cicd_configs/lint/.pylintrc --exit-zero
            displayName: "Run PyLint"
          
          # 3. Run YamlLint
          - script: |
              yamllint -c cicd_configs/lint/.yamllint . || true
            displayName: "Run YamlLint"

      - job: "ValidateAndDeploy"
        displayName: "Validate and Deploy Bundle"
        dependsOn: 
          - SecurityChecks
          - Linting
        variables:
          - template: variables.yml
            parameters:
              environment: ${{ parameters.environment }}
        
        steps:
          # 1. Install Agent Requirements & Allowing Executables
          - script: |   
              # Exit immediately if any command fails
              set -e

              # Install the Databricks CLI
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              
              # Enable all scripts to be executable within scripts folder
              chmod +x ./templates/scripts/*
            displayName: "Install Agent Requirements & Allowing Executables"

          # 2. Get and Increment Semantic Version Tag
          - script: templates/scripts/bump-version.sh
            name: setTag
            displayName: "Get and Increment Tag"
          
          # 3. Generate Environment Variables
          - script: |
              # Exit immediately if any command fails
              set -e    

              # Generate all required variables      
              export WHL_FILE=cdp_core-$(setTag.BUILD_VERSION)-py3-none-any.whl
              export SOURCE_PATH=packages/${WHL_FILE}
              export TARGET_PATH=/Workspace/Shared/artifacts/${WHL_FILE}
              export BUNDLE_VAR="environment=$(ENVIRONMENT),whl_path=/Workspace/Shared/artifacts/${WHL_FILE},SPN_ID=$(SPN_ID)"

              # Persist variables 
              echo "##vso[task.setvariable variable=SOURCE_PATH;isOutput=true]$SOURCE_PATH";
              echo "##vso[task.setvariable variable=TARGET_PATH;isOutput=true]$TARGET_PATH";
              echo "##vso[task.setvariable variable=BUNDLE_VAR;isOutput=true]$BUNDLE_VAR";
            name: setEnvVars
            displayName: "Setting Environment Variables"

          # 6. Validate Databricks Bundle
          - template: steps/dev_azure_cli.yml
            parameters:
              description: "Validating Databricks Bundle"
              inlineScript: |
                databricks bundle validate --var=$(setEnvVars.BUNDLE_VAR)

          # 7. Deploy Databricks Bundle
          - template: steps/dev_azure_cli.yml
            parameters:
              description: "Deploy Databricks Bundle"
              inlineScript: |
                export BUILD_VERSION=$(setTag.BUILD_VERSION)
                databricks bundle deploy --var=$(setEnvVars.BUNDLE_VAR)

                databricks workspace mkdirs /Shared/artifacts
                databricks workspace import --overwrite --format "AUTO" --file $(setEnvVars.SOURCE_PATH) $(setEnvVars.TARGET_PATH)

        
      - job: "UnitTest"
        displayName: "Unit Tests"
        dependsOn: 
          - ValidateAndDeploy
        variables:
          - name: BUNDLE_VAR
            value: $[ dependencies.ValidateAndDeploy.outputs['setEnvVars.BUNDLE_VAR'] ]
          - template: variables.yml
            parameters:
              environment: ${{ parameters.environment }}
        steps:
          - script: |   
              # Exit immediately if any command fails
              set -e

              # Install the Databricks CLI
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              
            displayName: "Install Agent Requirements"
          
          # 1. Run Unit Tests
          - template: steps/dev_azure_cli.yml
            parameters:
              description: "Unit Tests"
              inlineScript: |
                databricks bundle run jb_pytest --var=$(BUNDLE_VAR)
             